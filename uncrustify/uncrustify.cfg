# All options have possible values of ignore/add/remove/force

########################################################################
# Netrino 1.2.a  # Check PC_Lint too
#   Try to limit code width to N number of columns
#   TODO: Do we want this, and should we add more related parameters like alignment?
code_width = 80        # number, 0 = disable

########################################################################
# Netrino 1.3.a, 1.3.b
#   Braces for if, else, switch, while, do, and for statements
nl_if_brace 		= force		# "if () {" vs "if () \n {"
nl_else_brace 		= force		# "else {" vs "else \n {"
nl_brace_else		= force		# "} else" vs "} \n else" - cuddle else
nl_switch_brace 	= force		# "switch () {" vs "switch () \n {"
nl_do_brace 		= force		# "do {" vs "do \n {"
nl_while_brace 		= force		# "while () {" vs "while () \n {"
nl_brace_while		= force		# "} while" vs "} \n while" - cuddle while
nl_for_brace 		= force		# "for () {" vs "for () \n {"

mod_full_brace_if	= force		# "if (a) a--;" vs "if (a) { a--; }"
mod_full_brace_for	= force		# "for () a--;" vs "for () { a--; }"
mod_full_brace_do	= force		# "do a--; while ();" vs "do { a--; } while ();"
mod_full_brace_while = force		# "while (a) a--;" vs "while (a) { a--; }"

# TODO: Netrino coding standard does not address enum, struct, union,
# or function braces, although examples follow the same style as for 
# keywords. Possibly should use these:
nl_enum_brace=force				# "enum {" vs "enum \n {"
nl_union_brace=force			# "union {" vs "union \n {"
nl_struct_brace=force			# "struct {" vs "struct \n {"
nl_fcall_brace=force			# "list_for_each() {" vs "list_for_each()\n{"
nl_fdef_brace=force				# "int foo() {" vs "int foo()\n{"


########################################################################
# Netrino 3.1.a
#   if, else, switch, while, do, and return followed by a space
sp_before_sparen	= force		# "if (" vs "if("
sp_return_paren		= force		# "return (1);" vs "return(1);"

########################################################################
# Netrino 3.1.b
#   Assignment operators have space before and after
sp_assign		= force

########################################################################
# Netrino 3.1.c
#   Binary operators have space before and after
sp_arith		= force
sp_bool			= force
sp_compare		= force

########################################################################
# Netrino 3.1.d
#   Unary operators have space before and no space after
sp_not=remove 				# "! j" vs "!j"
sp_inv=remove				# "~ j" vs "~j"
sp_incdec=remove			# "++ j" vs "++ j"
sp_after_oc_scope=ignore	# "+ j" vs "+j"

########################################################################
# Netrino 3.1.e
#   Pointer operators have spaces on 2 sides in declarations but
#   otherwise no space on the operand side
sp_before_ptr_star=force		# "int *i;" vs "int*i;"
sp_after_ptr_star=force			# "int* i;" vs "int*i;"
sp_before_byref=force			# "int &i;" vs "int&i;"
sp_after_byref=force			# "int& i;" vs "int&i;"
sp_deref=remove					# "*i" vs "* i"
sp_addr=remove					# "&i" vs "& i"

########################################################################
# Netrino 3.1.f
#   ? and : of ternary operator have spaces on both sides
sp_cond_question=force		# ")?2" vs ") ? 2"
sp_cond_colon=force			# "2:3" vs "2 : 3"		

########################################################################
# Netrino 3.1.g
#   -> and . do not have spaces on either side
sp_member=remove				# "foo->bar" vs "foo -> bar" and "foo.bar" vs "foo.bar"

########################################################################
# Netrino 3.1.h
#   Left and right brackets of array subscript operator ([ and ]) 
#   do not have spaces on either side
sp_before_square=remove			# "a [0]" vs "a[0]"
sp_inside_square=remove			# "a[ 0 ]" vs "a[0]"
#sp_before_squares=remove		# TODO: What does this do? Not needed for Netrino

########################################################################
# Netrino 3.1.i
#   Expressions within parens will have no spaces next to parens
sp_inside_paren=remove			# "(i" vs "( i", "i)" vs "i )"

########################################################################
# Netrino 3.1.j
#   Both parens of the function call operator never have surrounding spaces,
#   except for the single function declaration
#   TODO: Does this mean the prototype or the definition? Also, rationale
#   is to be able to search for definition, but many IDEs will do this for you.
sp_func_call_paren=remove		# "foo (" vs "foo("
sp_func_proto_paren=force		# "int foo ();" vs "int foo();"
#sp_func_def_paren=force			# "foo (){}" vs "foo(){}" # depends on TODO

########################################################################
# Netrino 3.1.k
#   Each comma separating function parameters should be followed by one space
sp_after_comma=force			# "foo(a,b" vs "foo(a, b)"
sp_before_comma=remove			# TODO: Not addressed by Netrino, decide if we want it

########################################################################
# Netrino 3.1.l
#   Semicolon separating elements of for statement followed by one space
#   We will be adding that an empty for(;;) will not have spaces after semi
sp_after_semi_for=force			# "for(i=0; i<10" vs "for(i=0;i<10"
sp_after_semi_for_empty=remove   # TODO: Not addressed by Netrino, decide if we want it


########################################################################
# Netrino 3.1.m
#   Semicolon should follow the statement it terminates without a preceding space
sp_before_semi=remove			# "i=1 ;" vs "i=1;"

########################################################################
# Netrino 3.2.a
#   Variable names within a series of declarations must be aligned
align_var_def_span = 1
align_var_def_star_style=2
# TODO: Look at these extra options
# align_var_def_thresh                     = 0        # number
# align_var_def_gap                        = 10        # number

########################################################################
# Netrino 3.2.b
#   Names of struct and union members must be aligned
align_var_struct_span=1

########################################################################
# Netrino 3.2.c
#   Assignment operators within a block of assignments must be aligned
align_assign_span=1
# TODO: Look at this extra option
# align_assign_thresh=2

########################################################################
# Netrino 3.2.d
#   The # in a preprocessor directive must always be in column 1,
#   except when indenting within a #if/#else sequence
pp_indent=force
pp_indent_count=4

########################################################################
# Netrino 3.3.a
#   Only one statement per line
nl_after_semicolon=true

########################################################################
# Netrino 3.3.b
#   A newline should be added before and after each natural block of code
# TODO: Do we really want all of these?
nl_before_if=force
nl_before_for=force
nl_before_while=force
nl_before_switch=force
nl_before_do=force

########################################################################
# Netrino 3.3.c
#   Source files must have a blank line at the end
nl_end_of_file_min=1
nl_end_of_file=force

########################################################################
# Netrino 3.4.a, 3.5.a, 3.6.a
#   Don't use tabs, indentation is 4 spaces, UNIX newlines
indent_columns=4  
indent_with_tabs=0  # 0=spaces only, 1=indent to level only, 2=indent with tabs
newlines=lf #cr   

########################################################################
# Netrino 3.4.b
#   Case statement should be indented from switch; contents indented once more
#   TODO: Default is to indent contents once more, is there a parameter for this?
# TODO: Netrino 8.3.a
#   Break shall align with the associated case, not the contents of the case
#   (Not the default, and I don't know if Uncrustify can do this)
indent_switch_case = indent_columns        	# number, usually 0 or indent_columns
nl_before_case = true						# false/true
nl_after_case = true						# false/true

# Possibly useful options here, commented out for now
# If TRUE, it will move a 'break' that appears after a fully braced 'case' before the close brace.
# mod_move_case_break                      = true    # false/true

# Spaces to shift the 'case' line, without affecting any other lines
# Usually 0.
# indent_case_shift                        = 2        # number

# Will add or remove the braces around a fully braced case statement.
# Will only remove the braces if there are no variable declarations in the block.
# mod_case_brace                           = force   # ignore/add/remove/force

# Spaces to indent '{' from 'case'.
# By default, the brace will appear under the 'c' in case.
# Usually set to 0 or indent_columns.
# indent_case_brace                        = 0        # number

########################################################################
# Netrino 3.4.c
#   When statements are longer than max line width, indent later lines for readability
#   TODO: Look at options for this. Currently using defaults.


########################################################################
# MisST standards
#   Function return types on same line as function name
nl_func_type_name=remove			# "int \nfoo(){}" vs "int foo(){}"
nl_func_proto_type_name=remove		# "int \nfoo();" vs "int foo();"





